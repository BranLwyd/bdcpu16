package cc.bran.bdcpu16.codegen;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * This class, when run, generates a precompiled instruction provider.
 * @author Brandon Pitman
 */
public class InstructionPrecompiler
{
	private static final String PROVIDER_CLASS = "PrecompiledInstructionProvider";
	private static final String DISCLAIMER = "/* Code auto-generated by InstructionPrecompiler. Do not modify. */\n";
	
	/**
	 * Generates code for the provider and writes it to disk.
	 * @param baseDirectory the base directory to write code to
	 * @param packageName the package the generated code should be placed in
	 */
	private static void precompileProvider(String baseDirectory, String packageName)
	{
		StringBuilder providerCode = new StringBuilder();
		
		providerCode.append(DISCLAIMER);
		
		providerCode.append("package ");
		providerCode.append(packageName);
		providerCode.append(";");
		
		providerCode.append("import cc.bran.bdcpu16.Instruction;");
		providerCode.append("import cc.bran.bdcpu16.IllegalInstruction;");
		providerCode.append("import cc.bran.bdcpu16.InstructionProvider;");
		
		providerCode.append("public class ");
		providerCode.append(PROVIDER_CLASS);
		providerCode.append(" implements InstructionProvider {");
		
		providerCode.append("private static boolean initialized = false;");
		providerCode.append("private static Instruction[] cache;");
		
		providerCode.append("private static boolean isLegal(int instVal) { final int opVal = instVal & 0x1f; if(opVal == 0) { switch((instVal >> 5) & 0x1f) { case 0x01:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x10:case 0x11:case 0x12: return true; }; return false; }; switch(opVal) { case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x1a:case 0x1b:case 0x1e:case 0x1f: return true; }; return false; }");
		
		providerCode.append("public ");
		providerCode.append(PROVIDER_CLASS);
		providerCode.append("() { if(!initialized) { try { final Instruction illegalInst = IllegalInstruction.getInstance(); cache = new Instruction[65536]; for(int i = 0; i < 65536; ++i) { if(!isLegal(i)) { cache[i] = illegalInst; continue; } cache[i] = (Instruction)Class.forName(String.format(\"");
		providerCode.append(packageName);
		providerCode.append(".PrecompiledInstruction%04X\", i)).newInstance(); } } catch(Exception ex) { ex.printStackTrace(); System.exit(1); } } }");
		
		providerCode.append("public Instruction getInstruction(char instructionValue) { return cache[instructionValue]; }");
		providerCode.append("}");
		
		writeCode(baseDirectory, packageName, PROVIDER_CLASS, providerCode.toString());
	}

	/**
	 * Generates code for the instructions and writes them to disk.
	 * @param progress keeps track of the next instruction to handle
	 * @param baseDirectory the base directory to write code to
	 * @param packageName the package the instruction class should be in
	 */
	private static void precompileInstructions(AtomicInteger progress, String baseDirectory, String packageName)
	{
		int instVal = progress.getAndIncrement();
		
		while(instVal < 65536)
		{
			final String instructionClassName = String.format("PrecompiledInstruction%04X", instVal);
			final String code = InstructionCompiler.getCodeForInstruction(packageName, instructionClassName, (char)instVal, false);
			
			if(code != null)
			{
				StringBuilder instructionCode = new StringBuilder();
				instructionCode.append(DISCLAIMER);
				instructionCode.append(code);
				
				writeCode(baseDirectory, packageName, instructionClassName, instructionCode.toString());
			}
			
			instVal = progress.getAndIncrement();
		}
	}
	
	/**
	 * Writes some Java code to a file.
	 * @param baseDirectory the base directory to write code to
	 * @param packageName the package of the class
	 * @param simpleClassName the class name (without package)
	 * @param code the code to write
	 */
	private static void writeCode(String baseDirectory, String packageName, String simpleClassName, String code)
	{
		final String dirName = baseDirectory + "/" + packageName.replace('.', '/');
		final String fileName = dirName + "/" + simpleClassName + ".java";
		
		new File(dirName).mkdirs(); /* make sure the directory exists */
		File file = new File(fileName);
		
		try
		{
			FileWriter fw = new FileWriter(file);
			fw.write(code);
			fw.close();
		}
		catch(IOException ex)
		{
			ex.printStackTrace();
			System.exit(1);
		}
	}
	
	private static final String HELP_TEXT =
			"valid command line arguments:\n" +
	        "  -dir <dir>                       sets the output directory\n" +
			"  -package <package>               sets the package to place code in\n" +
	        "  -threads <number>                sets number of threads to use for instruction codegen\n" +
			"  -noProvider                      do not generate code for provider class\n" +
	        "  -noInstruction                   do not generate code for instruction classes\n" +
			"  -force                           do not confirm before starting\n" +
	        "  -help                            display this message\n";
	
	public static void main(String[] args) throws IOException
	{
		String baseDir = "src";
		String packageName = "cc.bran.bdcpu16.precompiled";
		int numThreads = Runtime.getRuntime().availableProcessors();
		boolean force = false;
		boolean noInstructions = false;
		boolean noProvider = false;
		
		/* handle command line arguments */
		int arg = 0;
		while(arg < args.length)
		{
			String argString = args[arg].toLowerCase();
			
			if("-dir".equals(argString)) {
				if(arg == args.length - 1)
				{
					System.err.println("-dir needs an argument");
					System.exit(1);
				}
				baseDir = args[arg + 1];
				arg += 2;
			} else if("-package".equals(argString)) {
				if(arg == args.length - 1)
				{
					System.err.println("-package needs an argument");
					System.exit(1);
				}
				packageName = args[arg + 1];
				arg += 2;
			} else if("-threads".equals(argString)) {
				if(arg == args.length - 1)
				{
					System.err.println("-threads needs an argument");
					System.exit(1);
				}
				try
				{
					numThreads = Integer.parseInt(args[arg + 1]);
				}
				catch(NumberFormatException ex)
				{
					System.err.println("-threads expects a numeric argument");
				}
				arg += 2;
			} else if("-force".equals(argString)) {
				force = true;
				arg++;
			} else if("-noinstructions".equals(argString)) {
				noInstructions = true;
				arg++;
			} else if("-noprovider".equals(argString)) {
				noProvider = true;
				arg++;
			} else if("-help".equals(argString)) {
				System.err.println(HELP_TEXT);
				System.exit(0);
			} else {
				System.err.println(String.format("unexpected argument: %s", args[arg]));
				System.err.println("try the -help argument");
				System.exit(1);
			}
		}
		
		if(noProvider && noInstructions)
		{
			System.out.println("no code to generate. exiting.");
			System.exit(0);
		}
		
		System.out.println(String.format("base directory: %s", baseDir));
		System.out.println(String.format("package: %s", packageName));
		if(!noInstructions)
		{
			System.out.println(String.format("threads: %d", numThreads));
		}
				
		if(noProvider)
		{
			System.out.println("generate only instruction code.");
		}
		else if(noInstructions)
		{
			System.out.println("generate only provider code.");
		}
		
		System.out.println();
		
		if(!force)
		{
			System.out.print("Is this correct? [Y to continue, anything else to abort] ");
			int input = System.in.read();
			if((char)input != 'Y')
			{
				System.out.println("aborting.");
				System.exit(0);
			}
		}
		
		if(!noProvider)
		{
			System.out.println("generating provider code...");
			precompileProvider(baseDir, packageName);
		}
		
		if(!noInstructions)
		{
			System.out.print("generating instruction code...");
			if(numThreads > 1)
			{
				System.out.print(String.format(" (using %d threads)", numThreads));
			}
			System.out.println();
			
			InstructionCompilerRunnable icr = new InstructionCompilerRunnable(baseDir, packageName);
			
			Thread[] compilerThreads = new Thread[numThreads];
			for(int i = 0; i < compilerThreads.length; ++i)
			{
				compilerThreads[i] = new Thread(icr);
				compilerThreads[i].start();
			}
			
			for(int i = 0; i < compilerThreads.length; ++i)
			{
				while(compilerThreads[i].isAlive())
				{
					try
					{
						compilerThreads[i].join();
					}
					catch(InterruptedException ex)
					{
						/* ignore */
					}
				}
			}
		}
	}
	
	private static class InstructionCompilerRunnable implements Runnable
	{
		private final AtomicInteger progress;
		private final String baseDir;
		private final String instructionPackage;
		
		public InstructionCompilerRunnable(String baseDir, String instructionPackage)
		{
			this.progress = new AtomicInteger();
			
			this.baseDir = baseDir;
			this.instructionPackage = instructionPackage;
		}
		
		@Override
		public void run()
		{
			precompileInstructions(progress, baseDir, instructionPackage);
		}
		}
	
}